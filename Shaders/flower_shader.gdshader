shader_type spatial;


//vec2 rotateZ(float x, float y, float rotation) {
	//float sinRot = sin(rotation);
	//float cosRot = cos(rotation);
	//return vec2(x * cosRot - y * sinRot, y * cosRot + x * sinRot);
//}
//vec2 rotateX(float y, float z, float rotation) {
	//float sinRot = sin(rotation);
	//float cosRot = cos(rotation);
	//return vec2(y * cosRot - z * sinRot, z * cosRot + y * sinRot);
//}
//vec2 rotateY(float x, float z, float rotation) {
	//float sinRot = sin(rotation);
	//float cosRot = cos(rotation);
	//return vec2(x * cosRot + z * sinRot, z * cosRot - x * sinRot);
//}

void vertex() {
	// Called for every vertex the material is visible on.
}

void fragment() {
	// Called for every pixel the material is visible on.
}

//void light() {
	// Called for every pixel for every light affecting the material.
	// Uncomment to replace the default light processing function with this one.
//}
